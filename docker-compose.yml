# docker-compose.yml

services:
  # MySQL 데이터베이스 서비스
  db:
    image: mysql:8.0
    container_name: mysql_db
    # 컨테이너가 중지/재시작 되어도 데이터가 유지되도록 볼륨을 설정합니다.
    volumes:
      - mysql_data:/var/lib/mysql
    # MySQL 서버의 환경 변수를 설정합니다. (settings.py와 일치시켜야 함)
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # MySQL root 계정 비밀번호
      MYSQL_DATABASE: ${MYSQL_DATABASE} # 생성할 데이터베이스 이름
      MYSQL_USER: ${MYSQL_USER} # DB 접속용 사용자 이름
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # DB 접속용 비밀번호
    ports:
      - "3306:3306" # 호스트와 컨테이너의 포트를 연결 (DB 툴로 접속 시 필요)
    command:
      # MySQL 서버의 기본 문자셋과 콜레이션을 설정합니다.
      --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # Django 애플리케이션 서비스
  web:
    container_name: django_web
    restart: always
    # 현재 디렉토리의 Dockerfile을 사용하여 이미지를 빌드합니다.
    build:
      context: ./Backend/
      dockerfile: Dockerfile
    # 현재 디렉토리의 모든 파일을 컨테이너의 /app 디렉토리와 동기화합니다.
    # 코드를 수정하면 컨테이너에 즉시 반영됩니다.
    volumes:
      - ./Backend:/app
    # 호스트의 8000번 포트와 컨테이너의 8000번 포트를 연결합니다.
    ports:
      - "8000:8000"
    # db 서비스가 시작된 후에 web 서비스가 시작되도록 의존성을 설정합니다.
    depends_on:
      - db
    # Django가 DB에 연결할 때 사용할 환경 변수 (settings.py에서 사용)
    environment:
      - DB_HOST=db
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=root
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD}

  frontend:
    container_name: react_frontend
    build:
      context: ./Frontend # 프론트엔드 폴더를 빌드 컨텍스트로 지정
      dockerfile: Dockerfile
    volumes:
      # 소스 코드 변경이 바로 반영되도록 로컬 폴더와 컨테이너 폴더를 연결합니다.
      - ./Frontend:/app
      # 로컬의 node_modules가 컨테이너의 node_modules를 덮어쓰는 것을 방지합니다.
      - /app/node_modules
    ports:
      # 로컬 PC의 5173번 포트와 컨테이너의 5173번 포트를 연결합니다.
      - "5173:5173"
    depends_on:
      - web # 백엔드가 실행된 후에 프론트엔드가 실행되도록 설정 (선택 사항)

# Docker 볼륨 정의
volumes:
  mysql_data:
